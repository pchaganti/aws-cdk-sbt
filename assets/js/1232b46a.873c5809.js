"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[912],{4293:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=n(4848),a=n(8453);const r={sidebar_position:2},s="Create the control plane",i={id:"tutorials/tutorial-basics/create-control-plane",title:"Create the control plane",description:"Now that we have SBT installed, let's create a new SBT control plane. Create a new file under /lib/control-plane.ts with the following contents.",source:"@site/docs/tutorials/tutorial-basics/create-control-plane.md",sourceDirName:"tutorials/tutorial-basics",slug:"/tutorials/tutorial-basics/create-control-plane",permalink:"/sbt-aws/docs/tutorials/tutorial-basics/create-control-plane",draft:!1,unlisted:!1,editUrl:"https://github.com/awslabs/sbt-aws/blob/main/website/docs/tutorials/tutorial-basics/create-control-plane.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Install the SaaS Builder Toolkit for AWS",permalink:"/sbt-aws/docs/tutorials/tutorial-basics/install-sbt"},next:{title:"Build the control plane",permalink:"/sbt-aws/docs/tutorials/tutorial-basics/build-it"}},l={},c=[];function d(t){const e={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"create-the-control-plane",children:"Create the control plane"})}),"\n",(0,o.jsxs)(e.p,{children:["Now that we have SBT installed, let's create a new SBT control plane. Create a new file under ",(0,o.jsx)(e.code,{children:"/lib/control-plane.ts"})," with the following contents."]}),"\n",(0,o.jsx)(e.admonition,{type:"warning",children:(0,o.jsx)(e.p,{children:"Please be sure to replace the email address with a real email as this is where you'll get the temporary admin password."})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import * as sbt from '@cdklabs/sbt-aws';\nimport { Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\n\nexport class ControlPlaneStack extends Stack {\n  public readonly regApiGatewayUrl: string;\n  public readonly eventManager: sbt.IEventManager;\n\n  constructor(scope: Construct, id: string, props?: any) {\n    super(scope, id, props);\n    const cognitoAuth = new sbt.CognitoAuth(this, 'CognitoAuth', {\n      // Avoid checking scopes for API endpoints. Done only for testing purposes.\n      setAPIGWScopes: false,\n    });\n\n    const controlPlane = new sbt.ControlPlane(this, 'ControlPlane', {\n      auth: cognitoAuth,\n      systemAdminEmail: 'ENTER YOUR EMAIL HERE',\n    });\n\n    this.eventManager = controlPlane.eventManager;\n    this.regApiGatewayUrl = controlPlane.controlPlaneAPIGatewayUrl;\n  }\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Notice here we're creating a new CDK Stack called \"ControlPlaneStack\". In that stack, we're creating a ",(0,o.jsx)(e.code,{children:"ControlPlane"})," construct which we imported from the ",(0,o.jsx)(e.code,{children:"@cdklabs/sbt-aws"})," package."]}),"\n",(0,o.jsxs)(e.p,{children:['Another important concept worth pointing out here is the plugability of this approach. Notice we\'re creating an "auth" component, called "CognitoAuth". This component implements the ',(0,o.jsx)(e.code,{children:"IAuth"})," interface defined in the SBT core package. We currently have a Cognito implementation of ",(0,o.jsx)(e.code,{children:"IAuth"}),", but we could technically implement that interface with any identity provider."]})]})}function p(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(d,{...t})}):d(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>i});var o=n(6540);const a={},r=o.createContext(a);function s(t){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),o.createElement(r.Provider,{value:e},t.children)}}}]);